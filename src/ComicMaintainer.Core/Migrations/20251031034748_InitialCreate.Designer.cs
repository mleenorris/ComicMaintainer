// <auto-generated />
using System;
using ComicMaintainer.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComicMaintainer.Core.Migrations
{
    [DbContext(typeof(ComicMaintainerDbContext))]
    [Migration("20251031034748_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("ComicMaintainer.Core.Data.ComicFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDuplicate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("IsDuplicate");

                    b.HasIndex("IsProcessed");

                    b.ToTable("ComicFiles");
                });

            modelBuilder.Entity("ComicMaintainer.Core.Data.ProcessingHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Success");

                    b.HasIndex("Timestamp");

                    b.ToTable("ProcessingHistory");
                });

            modelBuilder.Entity("ComicMaintainer.Core.Data.ComicFileEntity", b =>
                {
                    b.OwnsOne("ComicMaintainer.Core.Models.ComicMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("ComicFileEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Authors")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Issue")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Publisher")
                                .HasMaxLength(256)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Series")
                                .HasMaxLength(512)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Summary")
                                .HasMaxLength(2048)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Tags")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .HasMaxLength(512)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Volume")
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<int?>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ComicFileEntityId");

                            b1.ToTable("ComicFiles");

                            b1.WithOwner()
                                .HasForeignKey("ComicFileEntityId");
                        });

                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
