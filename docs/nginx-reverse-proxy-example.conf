# Example Nginx Reverse Proxy Configuration for ComicMaintainer
# This configuration shows how to proxy ComicMaintainer through nginx
# with optional path prefix support

# Option 1: Proxy at root path (e.g., http://comicmaintainer.example.com/)
server {
    listen 80;
    server_name comicmaintainer.example.com;

    # Optional: Redirect HTTP to HTTPS
    # return 301 https://$server_name$request_uri;

    # Client body size limit (for file uploads if needed in the future)
    client_max_body_size 100M;

    location / {
        # Forward to ComicMaintainer
        proxy_pass http://127.0.0.1:5000;
        
        # Required headers for reverse proxy support
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support (for Server-Sent Events)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Disable buffering for SSE (Server-Sent Events)
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts for long-running operations (batch processing)
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
}

# Option 2: Proxy with path prefix (e.g., http://example.com/comics/)
server {
    listen 80;
    server_name example.com;

    # Client body size limit
    client_max_body_size 100M;

    location /comics/ {
        # Forward to ComicMaintainer, stripping the /comics prefix
        proxy_pass http://127.0.0.1:5000/;
        
        # Required headers for reverse proxy support
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # IMPORTANT: Tell Flask about the path prefix
        proxy_set_header X-Forwarded-Prefix /comics;
        
        # WebSocket support (for Server-Sent Events)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Disable buffering for SSE (Server-Sent Events)
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts for long-running operations (batch processing)
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
}

# Option 3: HTTPS with Let's Encrypt
server {
    listen 443 ssl http2;
    server_name comicmaintainer.example.com;

    # SSL certificates (replace with your actual certificate paths)
    ssl_certificate /etc/letsencrypt/live/comicmaintainer.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/comicmaintainer.example.com/privkey.pem;

    # SSL configuration (Mozilla Intermediate)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Client body size limit
    client_max_body_size 100M;

    location / {
        # Forward to ComicMaintainer
        proxy_pass http://127.0.0.1:5000;
        
        # Required headers for reverse proxy support
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support (for Server-Sent Events)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Disable buffering for SSE (Server-Sent Events)
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts for long-running operations (batch processing)
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
}

# HTTP to HTTPS redirect for Option 3
server {
    listen 80;
    server_name comicmaintainer.example.com;
    return 301 https://$server_name$request_uri;
}

# Additional Notes:
# 
# 1. X-Forwarded-* Headers:
#    The application is configured to trust these headers from the reverse proxy:
#    - X-Forwarded-For: Original client IP address
#    - X-Forwarded-Proto: Original protocol (http/https)
#    - X-Forwarded-Host: Original host header
#    - X-Forwarded-Prefix: URL path prefix (for subpath deployments)
#
# 2. Server-Sent Events (SSE):
#    The application uses SSE for real-time updates. The following settings are required:
#    - proxy_buffering off: Disables nginx buffering for immediate event delivery
#    - proxy_cache off: Disables caching for SSE endpoints
#    - Long timeouts: Allows SSE connections to stay open
#
# 3. Long-Running Operations:
#    The application performs batch file processing which can take several minutes.
#    The 600s (10 minute) timeouts allow these operations to complete.
#
# 4. WebSocket Support:
#    While the application primarily uses SSE, the WebSocket headers ensure
#    compatibility with any future real-time features.
#
# 5. Docker Compose Integration:
#    If running ComicMaintainer in Docker Compose with nginx, use the service name
#    instead of 127.0.0.1:
#    proxy_pass http://comictagger-watcher:5000;
