name: Build and Push .NET Docker Image

on:
  push:
    branches: 
      - master
      - stable
      - 'copilot/implement-next-steps-dotnet'
  pull_request:
    branches: 
      - master
      - 'copilot/implement-next-steps-dotnet'

jobs:
  build-and-push-dotnet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Get version from .NET project
        id: get_version
        run: |
          # Extract version from ComicMaintainer.WebApi.csproj
          VERSION=$(grep -oP '<Version>\K[^<]+' src/ComicMaintainer.WebApi/ComicMaintainer.WebApi.csproj || echo "1.0.0")
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine Docker tags
        id: docker_tags
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Building from branch: $BRANCH_NAME"
          
          # Base image name for .NET version
          IMAGE_BASE="iceburn1/comicmaintainer-dotnet"
          
          if [ "$BRANCH_NAME" = "stable" ]; then
            # For stable branch, tag as stable
            TAGS="${IMAGE_BASE}:stable"
          elif [ "$BRANCH_NAME" = "copilot/implement-next-steps-dotnet" ]; then
            # For dotnet development branch, tag as dotnet-dev
            TAGS="${IMAGE_BASE}:dotnet-dev
          ${IMAGE_BASE}:dotnet-${{ steps.get_version.outputs.version }}"
          else
            # For master branch, tag as latest and with version number
            TAGS="${IMAGE_BASE}:latest
          ${IMAGE_BASE}:${{ steps.get_version.outputs.version }}
          ${IMAGE_BASE}:dotnet-latest"
          fi
          
          # Output tags in a format that can be used by docker/build-push-action
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-dotnet
          key: ${{ runner.os }}-buildx-dotnet-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-dotnet-
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push .NET Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dotnet
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache-dotnet
          cache-to: type=local,dest=/tmp/.buildx-cache-dotnet
          platforms: linux/amd64
          
      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo "Image pushed with tags ${{ steps.docker_tags.outputs.tags }}"
